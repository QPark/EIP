~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~ http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.    
 
  ------
  Generate securtiy
  ------
  Bernhard Hausen
  ------
  2013-04-25
  ------

Generate security 

  This goal is used during the creation of the web application. With 
  <<<generator-plugin:generate-security>>> four security configuration files will be created.
  
  * securityPolicy.xml

  * security-spring-config.xml

  * security-authentication-spring-config.xml

  * security-authorisation-spring-config.xml

  []
  
  Before executing this the <<<depencency:unpack>>> of all model artifacts has to be done.

  
+---+
<project>
  [...]
  <build>
    <plugins>
      <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <id>generate security configuration</id>
            <phase>process-sources</phase>
            <goals>
              <goal>generate-security</goal>
            </goals>
            <configuration>
              <baseDirectory>model-directory</baseDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  [...]
</project>
+---+

* Security

  In this kind of web application the security is devided into three peaces
  
  * Soap message securement (nonce created)
  
    Each soap message send to the server has to have a nonce and a created tag in the 
    soap message header (see ws-servlet.config)
  
  * Authentication of the user
    
    The user needs to be authenticated with a check of its password given in the 
    soap message and checked against the userprovider 
  
  * Authorisation of an authenticated user
    
    The user needs to have in minimum one role that allows the access of the 
    spring-integration channel. Authorisation is a channel authorization in 
    spring-integration!

* securityPolicy.xml

+---+
security config content
+---+
